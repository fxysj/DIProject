server {
    listen 443 ssl;
    server_name ai.testtikee.com;

    ssl_certificate /etc/letsencrypt/live/ai.testtikee.com/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/ai.testtikee.com/privkey.pem; # managed by Certbot
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;

    # 验证请求头 titkee.com 是否存在
    location / {
        if ($http_titkee_com != "aiKeeComWIthChain001029") {
            return 444;  # 请求头不匹配，返回 444 拦截请求
        }

        # 反向代理设置
        proxy_pass http://localhost:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # 对特定路径如 /api/v1/chat 进行路由和验证
    location ~ ^/api/v1/chat {
        # 检查请求头中是否包含 titkee.com，且值为 aiKeeComWIthChain001029
        if ($http_titkee_com != "aiKeeComWIthChain001029") {
            return 444;  # 请求头不匹配，返回 444 拦截请求
        }

        # 如果请求头匹配，则进行正常处理
        proxy_pass http://localhost:8000/api/v1/chat;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # 处理 OPTIONS 请求
    if ($request_method = 'OPTIONS') {
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
        add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization,Lang,Currency';
        add_header 'Access-Control-Allow-Credentials' 'true';
        add_header 'Access-Control-Max-Age' 1728000;
        add_header 'Content-Type' 'text/plain charset=UTF-8';
        add_header 'Content-Length' 0;
        return 204;
    }
}
