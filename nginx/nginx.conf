# 设置用户和工作进程数
user www-data;
worker_processes auto;

# 全局错误日志和pid文件
error_log /var/log/nginx/error.log;
pid /var/run/nginx.pid;

# 设置工作模式和连接数
events {
    worker_connections 1024;
}

# HTTP 配置
http {
    # 文件大小限制
    client_max_body_size 10M;

    # 日志格式
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    # 默认日志文件
    access_log /var/log/nginx/access.log main;

    # Gzip 压缩
    gzip on;
    gzip_types text/plain application/xml text/css application/javascript;
    gzip_min_length 1000;

    # 服务器配置
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # 使用的 server 区块配置
    server {
        listen 80;

        # 站点域名或 IP
        server_name example.com www.example.com;

        # 站点根目录
        root /var/www/html;
        index index.html index.htm;

        # 设置字符集
        charset utf-8;

        # 静态文件服务
        location / {
            try_files $uri $uri/ =404;
        }

        # 配置反向代理
        location /api/ {
            proxy_pass http://backend_server;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # 错误页面配置
        error_page 404 /404.html;
        location = /404.html {
            root /usr/share/nginx/html;
        }

        # 维护模式
        location /maintenance.html {
            root /var/www/html;
            internal;
        }
    }

    # 负载均衡配置
    upstream backend_server {
        server backend1.example.com;
        server backend2.example.com;
        # 使用负载均衡算法，默认是轮询
    }

    # 另一个 server 配置（例如 HTTPS 配置）
    server {
        listen 443 ssl;
        server_name secure.example.com;

        ssl_certificate /etc/nginx/ssl/example.com.crt;
        ssl_certificate_key /etc/nginx/ssl/example.com.key;

        location / {
            root /var/www/secure;
            index index.html;
        }
    }
}
